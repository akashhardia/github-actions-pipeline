name: CI/CD Pipeline

env:
  ECR_ACCOUNT_ID: 851725381326
  AWS_REGION: ap-northeast-1

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bash curl docker-compose

      - name: Build Docker images
        run: docker-compose -f ${{ env.COMPOSE_YAML }} build --parallel
        env:
          COMPOSE_YAML: docker/docker-compose-test.yaml

      - name: Launch database
        run: docker-compose -f ${{ env.COMPOSE_YAML }} up -d mysql
        env:
          COMPOSE_YAML: docker/docker-compose-test.yaml

      - name: Wait for services
        run: |
          docker-compose -f ${{ env.COMPOSE_YAML }} run dockerize dockerize -wait tcp://mysql:3306 -timeout 1m
          docker-compose -f ${{ env.COMPOSE_YAML }} run dockerize dockerize -wait tcp://redis:6379 -timeout 1m
        env:
          COMPOSE_YAML: docker/docker-compose-test.yaml

      - name: Setup database
        run: |
          docker-compose -f docker/docker-compose-test.yaml run --rm app env
          docker-compose -f ${{ env.COMPOSE_YAML }} run --rm app bundle exec rails db:create db:migrate
        env:
          COMPOSE_YAML: docker/docker-compose-test.yaml

      - name: Notify Status
        if: always()
        uses: ./.github/workflows/slack-notify.yml
        with:
          status: ${{ success() && 'success' || 'failure' }}
          stage: test
          commit: ${{ github.sha }}

  build:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'stg' && 'staging' || github.ref_name == 'prd' && 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        run: |
          docker buildx build --file docker/backend_nginx/Dockerfile.${{ github.ref_name }} \
            --tag ${{ secrets.AWS_ECR_URL }}/${{ vars.REGISTRY_NAME }}-nginx:${{ github.sha }} \
            --tag ${{ secrets.AWS_ECR_URL }}/${{ vars.REGISTRY_NAME }}-nginx:latest \
            --push .
          docker buildx build --file docker/app/Dockerfile.production \
            --tag ${{ secrets.AWS_ECR_URL }}/${{ vars.REGISTRY_NAME }}-rails:${{ github.sha }} \
            --tag ${{ secrets.AWS_ECR_URL }}/${{ vars.REGISTRY_NAME }}-rails:latest \
            --push .

      - name: Notify Status
        if: always()
        uses: ./.github/workflows/slack-notify.yml
        with:
          status: ${{ success() && 'success' || 'failure' }}
          stage: build
          commit: ${{ github.sha }}

  migrations:
    needs: build
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'stg' && 'staging' || github.ref_name == 'prd' && 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run migrations
        run: |
          # Example ECS run-task for migration
          echo "Running migrations on ECS..."

      - name: Notify Status
        if: always()
        uses: ./.github/workflows/slack-notify.yml
        with:
          status: ${{ success() && 'success' || 'failure' }}
          stage: migrations
          commit: ${{ github.sha }}

  deploy:
    needs: migrations
    if: needs.migrations.result == 'success'
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'stg' && 'staging' || github.ref_name == 'prd' && 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy ECS Services
        run: |
          echo "Deploying to ECS cluster for ${{ github.ref_name }}"

      - name: Notify Status
        if: always()
        uses: ./.github/workflows/slack-notify.yml
        with:
          status: ${{ success() && 'success' || 'failure' }}
          stage: deploy
          commit: ${{ github.sha }}

name: CI/CD Pipeline

env:
  ECR_ACCOUNT_ID: 851725381326
  AWS_REGION: ap-northeast-1

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Docker
  #       uses: docker/setup-buildx-action@v3

  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y bash curl docker-compose

  #     - name: Build Docker images
  #       run: docker-compose -f ${{ env.COMPOSE_YAML }} build --parallel
  #       env:
  #         COMPOSE_YAML: docker/docker-compose-test.yaml

  #     - name: Launch database
  #       run: docker-compose -f ${{ env.COMPOSE_YAML }} up -d mysql
  #       env:
  #         COMPOSE_YAML: docker/docker-compose-test.yaml

  #     - name: Wait for services
  #       run: |
  #         docker-compose -f ${{ env.COMPOSE_YAML }} run dockerize dockerize -wait tcp://mysql:3306 -timeout 1m
  #         docker-compose -f ${{ env.COMPOSE_YAML }} run dockerize dockerize -wait tcp://redis:6379 -timeout 1m
  #       env:
  #         COMPOSE_YAML: docker/docker-compose-test.yaml

  #     - name: Setup database
  #       run: |
  #         docker-compose -f docker/docker-compose-test.yaml run --rm app env
  #         docker-compose -f ${{ env.COMPOSE_YAML }} run --rm app bundle exec rails db:create db:migrate
  #       env:
  #         COMPOSE_YAML: docker/docker-compose-test.yaml

  #     # - name: Notify Slack on success
  #     #   if: success()
  #     #   uses: slackapi/slack-github-action@v1.23.0
  #     #   with:
  #     #     payload: '{"text":"Test job succeeded :tada:"}'
  #     #   env:
  #     #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  build-and-push:
    # needs: test
    # if: needs.test.result == 'success' && github.ref_name == 'stg' || github.ref_name == 'prd'
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'stg' && 'staging' || github.ref_name == 'prd' && 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
          registries: ${{ env.ECR_ACCOUNT_ID }}

      - name: Build and push Docker images
        run: |
          docker buildx build --file docker/backend_nginx/Dockerfile.${{ github.ref_name }} \
            --tag ${{ secrets.AWS_ECR_URL }}/${{ vars.REGISTRY_NAME }}-nginx:${{ github.sha }} \
            --tag ${{ secrets.AWS_ECR_URL }}/${{ vars.REGISTRY_NAME }}-nginx:latest \
            --push .
          docker buildx build --file docker/app/Dockerfile.production \
            --tag ${{ secrets.AWS_ECR_URL }}/${{ vars.REGISTRY_NAME }}-rails:${{ github.sha }} \
            --tag ${{ secrets.AWS_ECR_URL }}/${{ vars.REGISTRY_NAME }}-rails:latest \
            --push .

  deploy:
    needs: build-and-push
    if: needs.build-and-push.result == 'success' && github.ref_name == 'stg' || github.ref_name == 'prd'
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: pst-gt-${{ github.ref_name }}
      ECR_IMAGE_NAME: pst-gt-${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Image in ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          CONTAINER_NAME: ${{ env.ECR_IMAGE_NAME }}-rails
        with:
          task-definition-family: ${{ env.SERVICE_NAME }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/${{ env.CONTAINER_NAME }}:${{ github.sha }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 20

      - name: Notify Slack on success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: '{"text":"Deployment succeeded for ${{ github.ref_name }} :rocket:"}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  migration:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Run DB migrations
        run: aws ecs run-task --cluster ${{ secrets.ECS_CLUSTER }} --task-definition migration-task --region ${{ secrets.AWS_REGION }}

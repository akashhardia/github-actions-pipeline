name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bash curl docker-compose

      - name: Build Docker images
        run: docker-compose -f ${{ env.COMPOSE_YAML }} build --parallel
        env:
          COMPOSE_YAML: docker/docker-compose-test.yaml

      - name: Launch database
        run: docker-compose -f ${{ env.COMPOSE_YAML }} up -d mysql
        env:
          COMPOSE_YAML: docker/docker-compose-test.yaml

      - name: Wait for services
        run: |
          docker-compose -f ${{ env.COMPOSE_YAML }} run dockerize dockerize -wait tcp://mysql:3306 -timeout 1m
          docker-compose -f ${{ env.COMPOSE_YAML }} run dockerize dockerize -wait tcp://redis:6379 -timeout 1m
        env:
          COMPOSE_YAML: docker/docker-compose-test.yaml

      - name: Setup database
        run: |
          docker-compose -f docker/docker-compose-test.yaml run --rm app env
          docker-compose -f ${{ env.COMPOSE_YAML }} run --rm app bundle exec rails db:create db:migrate
        env:
          COMPOSE_YAML: docker/docker-compose-test.yaml

      # - name: Notify Slack on success
      #   if: success()
      #   uses: slackapi/slack-github-action@v1.23.0
      #   with:
      #     payload: '{"text":"Test job succeeded :tada:"}'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  build-and-push:
    needs: test
    if: needs.test.outputs.result == 'success'
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'stg' && 'staging' || github.ref_name == 'prd' && 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        run: |
          docker buildx build --file docker/backend_nginx/Dockerfile.$GITHUB_ENV --tag ${{ secrets.AWS_ECR_URL }}/nginx:${{ github.sha }} --push .
          docker buildx build --file docker/app/Dockerfile.production --tag ${{ secrets.AWS_ECR_URL }}/rails:${{ github.sha }} --push .
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          GITHUB_ENV: staging  # Change based on branch/environment

  # deploy:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy to ECS
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: task-def.json
  #         service: ${{ secrets.ECS_SERVICE }}
  #         cluster: ${{ secrets.ECS_CLUSTER }}
  #         region: ${{ secrets.AWS_REGION }}
  #         wait-for-service-stability: true

  #     - name: Notify Slack on success
  #       if: success()
  #       uses: slackapi/slack-github-action@v1.23.0
  #       with:
  #         payload: '{"text":"Deployment succeeded for ${{ github.ref_name }} :rocket:"}'
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # migration:
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Run DB migrations
  #       run: aws ecs run-task --cluster ${{ secrets.ECS_CLUSTER }} --task-definition migration-task --region ${{ secrets.AWS_REGION }}

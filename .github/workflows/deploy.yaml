name: CI/CD Pipeline

env:
  ECR_ACCOUNT_ID: 851725381326          // update these
  AWS_REGION: ap-northeast-1
  STG_SG: sg-0a0af6db1d23ce4b4
  STG_SUBNET: subnet-0be16eb0a13596f33
  PRD_SG: sg-0a0af6db1d23ce4b4
  PRD_SUBNET: subnet-0be16eb0a13596f33

on:
  push:
    branches:
      - main
      - stg
      - prd
  pull_request:
    branches:
      - '**'
  workflow_dispatch:          # remove this

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      COMPOSE_YAML: docker/docker-compose-test.yaml
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bash curl docker-compose

      - name: Build Docker images
        run: docker-compose -f ${{ env.COMPOSE_YAML }} build --parallel

      - name: Launch database
        run: docker-compose -f ${{ env.COMPOSE_YAML }} up -d mysql

      - name: Wait for services
        run: |
          docker-compose -f ${{ env.COMPOSE_YAML }} run dockerize dockerize -wait tcp://mysql:3306 -timeout 1m
          docker-compose -f ${{ env.COMPOSE_YAML }} run dockerize dockerize -wait tcp://redis:6379 -timeout 1m

      - name: Setup database
        run: |
          docker-compose -f docker/docker-compose-test.yaml run --rm app env
          docker-compose -f ${{ env.COMPOSE_YAML }} run --rm app bundle exec rails db:create db:migrate

  build:
    needs: test
    if: needs.test.result == 'success' && github.ref_name == 'stg' || github.ref_name == 'prd'
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'stg' && 'staging' || github.ref_name == 'prd' && 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
          registries: ${{ env.ECR_ACCOUNT_ID }}

      - name: Build and push Docker image - rails
        id: build-rails
        run: |
          docker buildx build --file docker/app/Dockerfile.production \
            --tag ${{ secrets.AWS_ECR_URL }}/${{ vars.REGISTRY_NAME }}-rails:${{ github.sha }} \
            --tag ${{ secrets.AWS_ECR_URL }}/${{ vars.REGISTRY_NAME }}-rails:latest \
            --push .

      - name: Build and push Docker image - nginx
        id: build-nginx
        run: |
          docker buildx build --file docker/backend_nginx/Dockerfile.${{ github.ref_name }} \
            --tag ${{ secrets.AWS_ECR_URL }}/${{ vars.REGISTRY_NAME }}-nginx:${{ github.sha }} \
            --tag ${{ secrets.AWS_ECR_URL }}/${{ vars.REGISTRY_NAME }}-nginx:latest \
            --push .

  migrations:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'success' && ( github.ref_name == 'stg' || github.ref_name == 'prd' )
    environment: ${{ github.ref_name == 'stg' && 'staging' || github.ref_name == 'prd' && 'production' }}
    env:
      SERVICE_NAME: pst-gt-${{ github.ref_name }}-sidekiq
      CONTAINER_NAME: pst-gt-${{ github.ref_name }}-rails
      ECS_CLUSTER: pst-gt-${{ github.ref_name }}-cluster
      SECURITY_GROUP: ${{ github.ref_name == 'prd' && env.PRD_SG || env.STG_SG }}
      SUBNET: ${{ github.ref_name == 'prd' && env.PRD_SUBNET || env.STG_SUBNET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update Image in ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: ${{ env.SERVICE_NAME }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/${{ env.CONTAINER_NAME }}:${{ github.sha }}
      - name: Deploy Updated Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          cluster: ${{ env.ECS_CLUSTER }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          run-task: true
          run-task-security-groups: ${{ env.SECURITY_GROUP }}
          run-task-subnets: ${{ env.SUBNET }}
          run-task-launch-type: FARGATE
          wait-for-minutes: 20
          run-task-container-overrides: |
            [
              {
                "name": "${{ env.CONTAINER_NAME }}",
                "command": ["bundle", "exec", "rails", "db:migrate"]
              }
            ]


  deploy-web:
    needs: [build, migrations]
    if: needs.migrations.result == 'success' && github.ref_name == 'stg' || github.ref_name == 'prd'
    environment: ${{ github.ref_name == 'stg' && 'staging' || github.ref_name == 'prd' && 'production' }}
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: pst-gt-${{ github.ref_name }}
      CONTAINER_NAME: pst-gt-${{ github.ref_name }}-rails
      ECS_CLUSTER: pst-gt-${{ github.ref_name }}-cluster
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Image in ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: ${{ env.SERVICE_NAME }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/${{ env.CONTAINER_NAME }}:${{ github.sha }}

      - name: Deploy to ECS
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 20

  deploy-sidekiq:
    needs: [build, migrations]
    if: needs.migrations.result == 'success' && (github.ref_name == 'stg' || github.ref_name == 'prd')
    environment: ${{ github.ref_name == 'stg' && 'staging' || github.ref_name == 'prd' && 'production' }}
    runs-on: ubuntu-latest
    env:
      ECS_CLUSTER: pst-gt-${{ github.ref_name }}-cluster
      SERVICE_NAME: pst-gt-${{ github.ref_name }}-sidekiq
      CONTAINER_NAME: pst-gt-${{ github.ref_name }}-sidekiq
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Image in ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: ${{ env.SERVICE_NAME }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/${{ env.CONTAINER_NAME }}:${{ github.sha }}

      - name: Deploy to ECS
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 20


  notify-success:
    needs: [deploy-web, deploy-sidekiq]
    if: ${{ needs.deploy-web.result == 'success' && needs.deploy-sidekiq.result == 'success' }}
    uses: ./.github/workflows/slack-notify.yml
    with:
      status: 'success'
      environment: ${{ github.ref_name == 'stg' && 'staging' || github.ref_name == 'prd' && 'production' }}
      commit: ${{ github.sha }}
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  notify-failure:
    needs: [deploy-web, deploy-sidekiq]
    if: ${{ needs.deploy-web.result != 'success' || needs.deploy-sidekiq.result != 'success' }}
    uses: ./.github/workflows/slack-notify.yml
    with:
      status: 'failure'
      environment: ${{ github.ref_name == 'stg' && 'staging' || github.ref_name == 'prd' && 'production' }}
      commit: ${{ github.sha }}
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
